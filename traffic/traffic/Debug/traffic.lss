
traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d01  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000820  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006e5  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054a  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  7a:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MDIO_voidSetPinValue>:
	}
	
}

void MDIO_voidSetPinValue(u8 copy_port,u8 copy_pin,u8 val){
	if(val==LOW)
  82:	41 11       	cpse	r20, r1
  84:	38 c0       	rjmp	.+112    	; 0xf6 <MDIO_voidSetPinValue+0x74>
	{
		switch(copy_port){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <MDIO_voidSetPinValue+0x2c>
  8a:	28 f0       	brcs	.+10     	; 0x96 <MDIO_voidSetPinValue+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <MDIO_voidSetPinValue+0x44>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <MDIO_voidSetPinValue+0x5c>
  94:	08 95       	ret
			case DIO_PORTA: CLEAR_BIT(PORTA,copy_pin);break;
  96:	2b b3       	in	r18, 0x1b	; 27
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <MDIO_voidSetPinValue+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <MDIO_voidSetPinValue+0x1c>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	08 95       	ret
			case DIO_PORTB: CLEAR_BIT(PORTB,copy_pin);break;
  ae:	28 b3       	in	r18, 0x18	; 24
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <MDIO_voidSetPinValue+0x38>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <MDIO_voidSetPinValue+0x34>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	08 95       	ret
			case DIO_PORTC: CLEAR_BIT(PORTC,copy_pin);break;
  c6:	25 b3       	in	r18, 0x15	; 21
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <MDIO_voidSetPinValue+0x50>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <MDIO_voidSetPinValue+0x4c>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	85 bb       	out	0x15, r24	; 21
  dc:	08 95       	ret
			case DIO_PORTD: CLEAR_BIT(PORTD,copy_pin);break;
  de:	22 b3       	in	r18, 0x12	; 18
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <MDIO_voidSetPinValue+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <MDIO_voidSetPinValue+0x64>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	08 95       	ret
	   }
	}
	else if (val==HIGH)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	99 f5       	brne	.+102    	; 0x160 <MDIO_voidSetPinValue+0xde>
	{
		switch(copy_port){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	89 f0       	breq	.+34     	; 0x120 <MDIO_voidSetPinValue+0x9e>
  fe:	28 f0       	brcs	.+10     	; 0x10a <MDIO_voidSetPinValue+0x88>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	c9 f0       	breq	.+50     	; 0x136 <MDIO_voidSetPinValue+0xb4>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	11 f1       	breq	.+68     	; 0x14c <MDIO_voidSetPinValue+0xca>
 108:	08 95       	ret
			case DIO_PORTA: SET_BIT(PORTA,copy_pin);break;
 10a:	2b b3       	in	r18, 0x1b	; 27
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <MDIO_voidSetPinValue+0x94>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <MDIO_voidSetPinValue+0x90>
 11a:	82 2b       	or	r24, r18
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	08 95       	ret
			case DIO_PORTB: SET_BIT(PORTB,copy_pin);break;
 120:	28 b3       	in	r18, 0x18	; 24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <MDIO_voidSetPinValue+0xaa>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <MDIO_voidSetPinValue+0xa6>
 130:	82 2b       	or	r24, r18
 132:	88 bb       	out	0x18, r24	; 24
 134:	08 95       	ret
			case DIO_PORTC: SET_BIT(PORTC,copy_pin);break;
 136:	25 b3       	in	r18, 0x15	; 21
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <MDIO_voidSetPinValue+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <MDIO_voidSetPinValue+0xbc>
 146:	82 2b       	or	r24, r18
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
			case DIO_PORTD: SET_BIT(PORTD,copy_pin);break;
 14c:	22 b3       	in	r18, 0x12	; 18
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <MDIO_voidSetPinValue+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <MDIO_voidSetPinValue+0xd2>
 15c:	82 2b       	or	r24, r18
 15e:	82 bb       	out	0x12, r24	; 18
 160:	08 95       	ret

00000162 <MDIO_voidSetPortDirection>:
	
}

void MDIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
	
	if (Copy_u8Direction==OUTPUT)
 162:	61 30       	cpi	r22, 0x01	; 1
 164:	a1 f4       	brne	.+40     	; 0x18e <MDIO_voidSetPortDirection+0x2c>
	{
		switch(Copy_u8Port){
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	49 f0       	breq	.+18     	; 0x17c <MDIO_voidSetPortDirection+0x1a>
 16a:	28 f0       	brcs	.+10     	; 0x176 <MDIO_voidSetPortDirection+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	49 f0       	breq	.+18     	; 0x182 <MDIO_voidSetPortDirection+0x20>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	51 f0       	breq	.+20     	; 0x188 <MDIO_voidSetPortDirection+0x26>
 174:	08 95       	ret
			case DIO_PORTA: DDRA=0xff;break;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8a bb       	out	0x1a, r24	; 26
 17a:	08 95       	ret
			case DIO_PORTB: DDRB=0xff;break;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	87 bb       	out	0x17, r24	; 23
 180:	08 95       	ret
			case DIO_PORTC: DDRC=0xff;break;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 bb       	out	0x14, r24	; 20
 186:	08 95       	ret
			case DIO_PORTD: DDRD=0xff;break;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret
		}
	}
	else if (Copy_u8Port==INPUT)
 18e:	81 11       	cpse	r24, r1
 190:	0f c0       	rjmp	.+30     	; 0x1b0 <MDIO_voidSetPortDirection+0x4e>
	{
		switch(Copy_u8Port){
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	41 f0       	breq	.+16     	; 0x1a6 <MDIO_voidSetPortDirection+0x44>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <MDIO_voidSetPortDirection+0x40>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	39 f0       	breq	.+14     	; 0x1aa <MDIO_voidSetPortDirection+0x48>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	39 f0       	breq	.+14     	; 0x1ae <MDIO_voidSetPortDirection+0x4c>
 1a0:	08 95       	ret
			case DIO_PORTA: DDRA=0x00;break;
 1a2:	1a ba       	out	0x1a, r1	; 26
 1a4:	08 95       	ret
			case DIO_PORTB: DDRB=0x00;break;
 1a6:	17 ba       	out	0x17, r1	; 23
 1a8:	08 95       	ret
			case DIO_PORTC: DDRC=0x00;break;
 1aa:	14 ba       	out	0x14, r1	; 20
 1ac:	08 95       	ret
			case DIO_PORTD: DDRD=0x00;break;
 1ae:	11 ba       	out	0x11, r1	; 17
 1b0:	08 95       	ret

000001b2 <main>:
#include <util/delay.h>


int main(void)
{
	inti_Seven_Segment();
 1b2:	0e 94 42 01 	call	0x284	; 0x284 <inti_Seven_Segment>
	MDIO_voidSetPortDirection(DIO_PORTA,OUTPUT);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 b1 00 	call	0x162	; 0x162 <MDIO_voidSetPortDirection>
	
	u8 number;
	while (1)
	{
	 
	 for(number=10 ; number>3 ; number--)
 1c2:	ca e0       	ldi	r28, 0x0A	; 10
 1c4:	1c c0       	rjmp	.+56     	; 0x1fe <main+0x4c>
	 {
		 Display_Num(number);
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 84 01 	call	0x308	; 0x308 <Display_Num>
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,HIGH);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,LOW);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,LOW);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 e6       	ldi	r24, 0x69	; 105
 1ee:	98 e1       	ldi	r25, 0x18	; 24
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x3e>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x48>
 1fa:	00 00       	nop
	
	u8 number;
	while (1)
	{
	 
	 for(number=10 ; number>3 ; number--)
 1fc:	c1 50       	subi	r28, 0x01	; 1
 1fe:	c4 30       	cpi	r28, 0x04	; 4
 200:	10 f7       	brcc	.-60     	; 0x1c6 <main+0x14>
 202:	c3 e0       	ldi	r28, 0x03	; 3
 204:	1c c0       	rjmp	.+56     	; 0x23e <main+0x8c>
	 }
	 
	 
	 for(number=3 ; number>0 ; number--)
	 {
		 Display_Num(number);
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 84 01 	call	0x308	; 0x308 <Display_Num>
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,LOW);
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,LOW);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,HIGH);
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	89 e6       	ldi	r24, 0x69	; 105
 22e:	98 e1       	ldi	r25, 0x18	; 24
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x7e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x88>
 23a:	00 00       	nop
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,LOW);
		 _delay_ms(8000);
	 }
	 
	 
	 for(number=3 ; number>0 ; number--)
 23c:	c1 50       	subi	r28, 0x01	; 1
 23e:	c1 11       	cpse	r28, r1
 240:	e2 cf       	rjmp	.-60     	; 0x206 <main+0x54>
 242:	ca e0       	ldi	r28, 0x0A	; 10
 244:	1c c0       	rjmp	.+56     	; 0x27e <main+0xcc>

	 }
		
		for(number=10 ; number>0 ; number--)
		{
					Display_Num(number);
 246:	8c 2f       	mov	r24, r28
 248:	0e 94 84 01 	call	0x308	; 0x308 <Display_Num>
		MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,LOW);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,LOW);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,HIGH);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_voidSetPinValue>
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	89 e6       	ldi	r24, 0x69	; 105
 26e:	98 e1       	ldi	r25, 0x18	; 24
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0xbe>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xc8>
 27a:	00 00       	nop
		 MDIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,HIGH);
		_delay_ms(8000);

	 }
		
		for(number=10 ; number>0 ; number--)
 27c:	c1 50       	subi	r28, 0x01	; 1
 27e:	c1 11       	cpse	r28, r1
 280:	e2 cf       	rjmp	.-60     	; 0x246 <main+0x94>
 282:	9f cf       	rjmp	.-194    	; 0x1c2 <main+0x10>

00000284 <inti_Seven_Segment>:
}
void Disable(u8 number){
	switch(number){
		case 1:MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN0,LOW);
		  break;
		case 2:MDIO_voidSetPinValue(DIO_PORTD,DIO_PIN1,LOW);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 b1 00 	call	0x162	; 0x162 <MDIO_voidSetPortDirection>
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 b1 00 	call	0x162	; 0x162 <MDIO_voidSetPortDirection>
 29c:	08 95       	ret

0000029e <Seven_Segment_Display>:
		  break;
	}
}
void Seven_Segment_Display(u8 number1,u8  number2)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	2a 97       	sbiw	r28, 0x0a	; 10
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 u8 List[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
 2b2:	9a e0       	ldi	r25, 0x0A	; 10
 2b4:	e0 e6       	ldi	r30, 0x60	; 96
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	de 01       	movw	r26, r28
 2ba:	11 96       	adiw	r26, 0x01	; 1
 2bc:	01 90       	ld	r0, Z+
 2be:	0d 92       	st	X+, r0
 2c0:	9a 95       	dec	r25
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <Seven_Segment_Display+0x1e>
	PORTC=List[number1];
 2c4:	e1 e0       	ldi	r30, 0x01	; 1
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 0f       	add	r30, r28
 2ca:	fd 1f       	adc	r31, r29
 2cc:	e8 0f       	add	r30, r24
 2ce:	f1 1d       	adc	r31, r1
 2d0:	80 81       	ld	r24, Z
 2d2:	85 bb       	out	0x15, r24	; 21
	PORTD=List[number2];
 2d4:	e1 e0       	ldi	r30, 0x01	; 1
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	e6 0f       	add	r30, r22
 2de:	f1 1d       	adc	r31, r1
 2e0:	80 81       	ld	r24, Z
 2e2:	82 bb       	out	0x12, r24	; 18
 2e4:	2f e5       	ldi	r18, 0x5F	; 95
 2e6:	8a ee       	ldi	r24, 0xEA	; 234
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <Seven_Segment_Display+0x4c>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <Seven_Segment_Display+0x56>
 2f4:	00 00       	nop
	_delay_ms(300);
}
 2f6:	2a 96       	adiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <Display_Num>:
void Display_Num(u8 number)
{
	u8 right=number%10;
 308:	9d ec       	ldi	r25, 0xCD	; 205
 30a:	89 9f       	mul	r24, r25
 30c:	91 2d       	mov	r25, r1
 30e:	11 24       	eor	r1, r1
 310:	69 2f       	mov	r22, r25
 312:	66 95       	lsr	r22
 314:	66 95       	lsr	r22
 316:	66 95       	lsr	r22
 318:	66 0f       	add	r22, r22
 31a:	26 2f       	mov	r18, r22
 31c:	22 0f       	add	r18, r18
 31e:	22 0f       	add	r18, r18
 320:	62 0f       	add	r22, r18
 322:	86 1b       	sub	r24, r22
 324:	68 2f       	mov	r22, r24
	number/=10;
	Seven_Segment_Display(number,right);
 326:	89 2f       	mov	r24, r25
 328:	86 95       	lsr	r24
 32a:	86 95       	lsr	r24
 32c:	86 95       	lsr	r24
 32e:	0e 94 4f 01 	call	0x29e	; 0x29e <Seven_Segment_Display>
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
